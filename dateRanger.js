// Generated by CoffeeScript 1.6.2
var dateRanger;

dateRanger = function(init) {
  var clear_highlighting, date_validates, delta, delta_validates, edate, has_error, highlight_error, hms, in_millisecs, iso, reset_boxes, sdate, update_boxes;

  iso = d3.time.format.utc("%Y-%m-%d %H:%M");
  hms = function(millisecs) {
    var h, m, r_secs, seconds;

    seconds = millisecs / 1000;
    h = Math.floor(seconds / 3600);
    r_secs = seconds % 3600;
    m = Math.floor(r_secs / 60);
    return "" + h + ":" + m;
  };
  edate = typeof init.edate === 'undefined' ? new Date : init.edate;
  sdate = typeof init.sdate === 'undefined' ? new Date : init.sdate;
  sdate.setSeconds(0);
  sdate.setMilliseconds(0);
  edate.setSeconds(0);
  edate.setMilliseconds(0);
  delta = edate - sdate;
  $("#info #sdate").val(iso(sdate));
  $("#info #delta").val(hms(delta));
  $("#info #edate").val(iso(edate));
  $('#info input').keyup(function(event) {
    if (event.keyCode === 13) {
      if (!has_error()) {
        if (update_boxes(event.target.id)) {
          return init.callback(sdate, edate);
        }
      }
    } else if (event.keyCode === 27) {
      return reset_boxes();
    } else {
      delta_validates('#delta');
      date_validates('#sdate');
      return date_validates('#edate');
    }
  });
  if (init.focusout === true) {
    $('#info input').focusout(function(event) {
      if (!has_error()) {
        if (update_boxes(event.target.id)) {
          return init.callback(sdate, edate);
        }
      }
    });
  }
  update_boxes = function(id) {
    if (id === 'delta') {
      if (delta = delta_validates('#delta')) {
        sdate = new Date(edate - delta);
        $('#sdate').val(iso(sdate));
        return true;
      } else {
        highlight_error("#delta");
      }
    }
    if (id === 'sdate') {
      if (sdate = date_validates('#sdate')) {
        if (sdate > edate) {
          $('#edate').val(iso(d3.time.second.offset(sdate, delta / 1000)));
        } else {
          delta = edate - sdate;
          $('#delta').val(hms(delta));
        }
        return true;
      } else {
        highlight_error("#sdate");
      }
    }
    if (id === 'edate') {
      if (edate = date_validates('#edate')) {
        if (sdate > edate) {
          $('#sdate').val(iso(d3.time.second.offset(edate, delta / 1000)));
          $('#sdate').val(iso(new Date(edate - delta)));
        } else {
          delta = edate - sdate;
          $('#delta').val(hms(delta));
        }
        return true;
      } else {
        return highlight_error("#edate");
      }
    }
  };
  reset_boxes = function() {
    $('#sdate').val(iso(sdate));
    $('#delta').val(hms(delta));
    $('#edate').val(iso(edate));
    return clear_highlighting();
  };
  in_millisecs = function(hms) {
    var gabe_h_format, gabe_m_format, h_format, hms_format, ms;

    hms_format = new RegExp("\d*:\d*");
    h_format = new RegExp("\d*");
    gabe_h_format = new RegExp("\d*:");
    gabe_m_format = new RegExp(":\d*");
    if (hms_format.test(hms)) {
      hms = hms.split(":");
      ms = +hms[0] * 1000 * 3600;
      ms += +hms[1] * 1000 * 60;
      return ms;
    }
    if (gabe_h_format.test(hms)) {
      hms = hms.split(":");
      ms = +hms[0] * 1000 * 3600;
      return ms;
    }
    if (gabe_m_format.test(hms)) {
      hms = hms.split(":");
      ms = +hms[1] * 1000 * 60;
      return ms;
    }
    if (h_format.test(hms)) {
      ms = +hms * 1000 * 3600;
      return ms;
    }
  };
  date_validates = function(active_box) {
    var timestamp;

    timestamp = iso.parse($(active_box).val());
    if (timestamp === null) {
      d3.select(active_box).classed("error", true);
      return false;
    } else {
      d3.select(active_box).classed("error", false);
      return timestamp;
    }
  };
  delta_validates = function(delta_box) {
    var ms;

    if (ms = in_millisecs($(delta_box).val())) {
      d3.select(delta_box).classed("error", false);
      return ms;
    } else {
      d3.select(delta_box).classed("error", true);
      return false;
    }
  };
  has_error = function() {
    var input_box, _i, _len, _ref;

    _ref = ['#sdate', '#delta', '#edate'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input_box = _ref[_i];
      if ($(input_box).hasClass('error')) {
        $(input_box).effect("highlight", {
          color: 'orange'
        }, 500);
        return true;
      } else {
        false;
      }
    }
  };
  highlight_error = function(id) {
    return $(id).effect("highlight", {
      color: 'orange'
    }, 500);
  };
  return clear_highlighting = function() {
    var box, _i, _len, _ref, _results;

    _ref = ['#sdate', '#delta', '#edate'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      box = _ref[_i];
      _results.push(d3.select(box).classed("error", false));
    }
    return _results;
  };
};
